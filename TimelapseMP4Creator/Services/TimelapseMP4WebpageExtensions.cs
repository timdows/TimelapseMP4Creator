// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TimelapseMP4Creator.Services
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TimelapseMP4Webpage.
    /// </summary>
    public static partial class TimelapseMP4WebpageExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Hour1400File> ApiHour1400GetListGet(this ITimelapseMP4Webpage operations)
            {
                return operations.ApiHour1400GetListGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Hour1400File>> ApiHour1400GetListGetAsync(this ITimelapseMP4Webpage operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiHour1400GetListGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Hour1400File> ApiHour1400GetThumbnailListGet(this ITimelapseMP4Webpage operations)
            {
                return operations.ApiHour1400GetThumbnailListGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Hour1400File>> ApiHour1400GetThumbnailListGetAsync(this ITimelapseMP4Webpage operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiHour1400GetThumbnailListGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileName'>
            /// </param>
            public static void ApiHour1400GetImageGet(this ITimelapseMP4Webpage operations, string fileName = default(string))
            {
                operations.ApiHour1400GetImageGetAsync(fileName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiHour1400GetImageGetAsync(this ITimelapseMP4Webpage operations, string fileName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiHour1400GetImageGetWithHttpMessagesAsync(fileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static object ApiHour1400UploadPost(this ITimelapseMP4Webpage operations, Hour1400UploadRequest request = default(Hour1400UploadRequest))
            {
                return operations.ApiHour1400UploadPostAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiHour1400UploadPostAsync(this ITimelapseMP4Webpage operations, Hour1400UploadRequest request = default(Hour1400UploadRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiHour1400UploadPostWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiMP4ListGetListGet(this ITimelapseMP4Webpage operations)
            {
                operations.ApiMP4ListGetListGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMP4ListGetListGetAsync(this ITimelapseMP4Webpage operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiMP4ListGetListGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
